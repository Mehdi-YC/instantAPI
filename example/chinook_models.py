from flask import Flask,jsonify
from flask_restful import Resource, Api, reqparse,abort
import sqlite3

app = Flask(__name__)
api = Api(app)
parser = reqparse.RequestParser()

try:
	conn = sqlite3.connect('chinook.db')
except:
	print('error connecting to the database')

#script generated by instantAPI author:Mehdi

class albumsList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM albums').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('Title')
		parser.add_argument('ArtistId')
		args = parser.parse_args()
		inserting ="insert into albums values(NULL,?,?)"
		cur.execute(inserting,(args['Title'],args['ArtistId']))
		conn.commit()
		conn.close()
		return 'your albums has been added',201
api.add_resource(albumsList,'/albums/')

class artistsList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM artists').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('Name')
		args = parser.parse_args()
		inserting ="insert into artists values(NULL,?)"
		cur.execute(inserting,(args['Name']))
		conn.commit()
		conn.close()
		return 'your artists has been added',201
api.add_resource(artistsList,'/artists/')

class customersList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM customers').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('FirstName')
		parser.add_argument('LastName')
		parser.add_argument('Company')
		parser.add_argument('Address')
		parser.add_argument('City')
		parser.add_argument('State')
		parser.add_argument('Country')
		parser.add_argument('PostalCode')
		parser.add_argument('Phone')
		parser.add_argument('Fax')
		parser.add_argument('Email')
		parser.add_argument('SupportRepId')
		args = parser.parse_args()
		inserting ="insert into customers values(NULL,?,?,?,?,?,?,?,?,?,?,?,?)"
		cur.execute(inserting,(args['FirstName'],args['LastName'],args['Company'],args['Address'],args['City'],args['State'],args['Country'],args['PostalCode'],args['Phone'],args['Fax'],args['Email'],args['SupportRepId']))
		conn.commit()
		conn.close()
		return 'your customers has been added',201
api.add_resource(customersList,'/customers/')

class employeesList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM employees').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('LastName')
		parser.add_argument('FirstName')
		parser.add_argument('Title')
		parser.add_argument('ReportsTo')
		parser.add_argument('BirthDate')
		parser.add_argument('HireDate')
		parser.add_argument('Address')
		parser.add_argument('City')
		parser.add_argument('State')
		parser.add_argument('Country')
		parser.add_argument('PostalCode')
		parser.add_argument('Phone')
		parser.add_argument('Fax')
		parser.add_argument('Email')
		args = parser.parse_args()
		inserting ="insert into employees values(NULL,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
		cur.execute(inserting,(args['LastName'],args['FirstName'],args['Title'],args['ReportsTo'],args['BirthDate'],args['HireDate'],args['Address'],args['City'],args['State'],args['Country'],args['PostalCode'],args['Phone'],args['Fax'],args['Email']))
		conn.commit()
		conn.close()
		return 'your employees has been added',201
api.add_resource(employeesList,'/employees/')

class genresList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM genres').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('Name')
		args = parser.parse_args()
		inserting ="insert into genres values(NULL,?)"
		cur.execute(inserting,(args['Name']))
		conn.commit()
		conn.close()
		return 'your genres has been added',201
api.add_resource(genresList,'/genres/')

class invoice_itemsList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM invoice_items').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('InvoiceId')
		parser.add_argument('TrackId')
		parser.add_argument('UnitPrice')
		parser.add_argument('Quantity')
		args = parser.parse_args()
		inserting ="insert into invoice_items values(NULL,?,?,?,?)"
		cur.execute(inserting,(args['InvoiceId'],args['TrackId'],args['UnitPrice'],args['Quantity']))
		conn.commit()
		conn.close()
		return 'your invoice_items has been added',201
api.add_resource(invoice_itemsList,'/invoice_items/')

class invoicesList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM invoices').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('CustomerId')
		parser.add_argument('InvoiceDate')
		parser.add_argument('BillingAddress')
		parser.add_argument('BillingCity')
		parser.add_argument('BillingState')
		parser.add_argument('BillingCountry')
		parser.add_argument('BillingPostalCode')
		parser.add_argument('Total')
		args = parser.parse_args()
		inserting ="insert into invoices values(NULL,?,?,?,?,?,?,?,?)"
		cur.execute(inserting,(args['CustomerId'],args['InvoiceDate'],args['BillingAddress'],args['BillingCity'],args['BillingState'],args['BillingCountry'],args['BillingPostalCode'],args['Total']))
		conn.commit()
		conn.close()
		return 'your invoices has been added',201
api.add_resource(invoicesList,'/invoices/')

class media_typesList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM media_types').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('Name')
		args = parser.parse_args()
		inserting ="insert into media_types values(NULL,?)"
		cur.execute(inserting,(args['Name']))
		conn.commit()
		conn.close()
		return 'your media_types has been added',201
api.add_resource(media_typesList,'/media_types/')

class playlist_trackList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM playlist_track').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('TrackId')
		args = parser.parse_args()
		inserting ="insert into playlist_track values(NULL,?)"
		cur.execute(inserting,(args['TrackId']))
		conn.commit()
		conn.close()
		return 'your playlist_track has been added',201
api.add_resource(playlist_trackList,'/playlist_track/')

class playlistsList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM playlists').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('Name')
		args = parser.parse_args()
		inserting ="insert into playlists values(NULL,?)"
		cur.execute(inserting,(args['Name']))
		conn.commit()
		conn.close()
		return 'your playlists has been added',201
api.add_resource(playlistsList,'/playlists/')

class sqlite_sequenceList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM sqlite_sequence').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('seq')
		args = parser.parse_args()
		inserting ="insert into sqlite_sequence values(NULL,?)"
		cur.execute(inserting,(args['seq']))
		conn.commit()
		conn.close()
		return 'your sqlite_sequence has been added',201
api.add_resource(sqlite_sequenceList,'/sqlite_sequence/')

class sqlite_stat1List(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM sqlite_stat1').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('idx')
		parser.add_argument('stat')
		args = parser.parse_args()
		inserting ="insert into sqlite_stat1 values(NULL,?,?)"
		cur.execute(inserting,(args['idx'],args['stat']))
		conn.commit()
		conn.close()
		return 'your sqlite_stat1 has been added',201
api.add_resource(sqlite_stat1List,'/sqlite_stat1/')

class tracksList(Resource):
	def get(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		rows = cur.execute('SELECT * FROM tracks').fetchall()
		jsdata=[dict(zip([desc[0] for desc in cur.description],row)) for row in rows]
		conn.close()
		return jsonify({'data':jsdata})

	def post(self):
		conn = sqlite3.connect('chinook.db')
		cur=conn.cursor()
		parser.add_argument('Name')
		parser.add_argument('AlbumId')
		parser.add_argument('MediaTypeId')
		parser.add_argument('GenreId')
		parser.add_argument('Composer')
		parser.add_argument('Milliseconds')
		parser.add_argument('Bytes')
		parser.add_argument('UnitPrice')
		args = parser.parse_args()
		inserting ="insert into tracks values(NULL,?,?,?,?,?,?,?,?)"
		cur.execute(inserting,(args['Name'],args['AlbumId'],args['MediaTypeId'],args['GenreId'],args['Composer'],args['Milliseconds'],args['Bytes'],args['UnitPrice']))
		conn.commit()
		conn.close()
		return 'your tracks has been added',201
api.add_resource(tracksList,'/tracks/')


#index:
@app.route('/')
def index():
	return app.url_map

if __name__ == "__main__":
	app.run(debug=True)